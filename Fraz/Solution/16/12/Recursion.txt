// 50 

class Solution {
    public double myPow(double x, int n) {
        if(n == 0){
            return 1;
        }

        double p = (double)n;
        if(n > 0){
            if(n%2 == 0){
                double a = myPow(x, n/2);
                return a*a;
            }else{
                double a = myPow(x, n/2);
                return a*a*x;
            }
        }else{
            p = Math.abs(p);
            if(p%2 == 0){
                p = p/2;
                double a = myPow(x, (int)p);
                return 1/a*1/a;
            }else{
                p = p/2;
                double a = myPow(x, (int)p);
                return 1/a*1/a*1/x;
            }
        }
    }
}




// 125

class Solution {

    public boolean isPalindrome_helper(String s, int st, int end){
        if(st == end || st > end){
            return true;
        }

        if(s.charAt(st) == s.charAt(end)){
            return isPalindrome_helper(s, st + 1, end - 1);
        }else{
            return false;
        }
    }

    public boolean isPalindrome(String s) {
        StringBuilder sb = new StringBuilder();
        
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(ch >= 'a' && ch <= 'z'){
                sb.append(ch);
            }else if(ch >= 'A' && ch <= 'Z'){
                 sb.append((char)(ch - 'A' + 'a'));
            }else if(ch >= '0' && ch <= '9'){
                sb.append(ch);
            }
        }
        // System.out.println(sb.toString());
        return isPalindrome_helper(sb.toString(), 0, sb.length() - 1);
    }
}




// 78


Method - 1

class Solution {
    public void subsets_helper(int[] nums, int index, List<List<Integer>> finalans, List<Integer> sans){
        if(index == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            finalans.add(temp);
            return;
        }

        subsets_helper(nums, index + 1, finalans, sans);
        sans.add(nums[index]);
        subsets_helper(nums, index + 1, finalans, sans);
        sans.remove(sans.size() - 1);
    }
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        subsets_helper(nums, 0, result, new ArrayList<>());
        return result;
    }
}

Method - 2

class Solution {
    public List<List<Integer>> subsets_helper(int[] nums, int index, List<Integer> sans){
        if(index == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            List<List<Integer>> bres = new ArrayList<List<Integer>>();
            bres.add(temp);
            return bres;
        }

        List<List<Integer>> recfans = new ArrayList<List<Integer>>();

        List<List<Integer>> temp1ans = subsets_helper(nums, index + 1 , sans);
        sans.add(nums[index]);
        List<List<Integer>> temp2ans = subsets_helper(nums, index + 1, sans);
        sans.remove(sans.size() - 1);

        for(List<Integer> l : temp1ans){
            recfans.add(l);
        }

        for(List<Integer> l : temp2ans){
            recfans.add(l);
        }
        return recfans;
    }

    
    public List<List<Integer>> subsets(int[] nums) {
        return subsets_helper(nums, 0, new ArrayList<>());
    }
}


// 46

class Solution {
    public void permute_helper(int[] nums, List<List<Integer>> fans, List<Integer> sans){
        if(sans.size() == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }

        for(int i = 0; i < nums.length; i++){
            if(nums[i] > -(int)1e9){

                int val = nums[i];
                nums[i] = -(int)1e9;

                sans.add(val);
                permute_helper(nums, fans, sans);

                nums[i] = val;
                sans.remove(sans.size() - 1);
            }
        }
    }
    
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        permute_helper(nums, result, new ArrayList<>());
        return result;
    }
}


// 47

Method - 1

class Solution {

    public void permute_helper(int[] nums, HashSet<List<Integer>> fans, List<Integer> sans){
        if(sans.size() == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }

        for(int i = 0; i < nums.length; i++){
            if(nums[i] > -(int)1e9){

                int val = nums[i];
                nums[i] = -(int)1e9;

                sans.add(val);
                permute_helper(nums, fans, sans);

                nums[i] = val;
                sans.remove(sans.size() - 1);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        HashSet<List<Integer>> hs = new HashSet<List<Integer>>();
        permute_helper(nums, hs, new ArrayList<>());

        for(List<Integer> l : hs){
            result.add(l);
        }
        return result;
    }
}


Method - 2

class Solution {

    public void permute_helper(int[] nums, HashSet<List<Integer>> fans, List<List<Integer>> res, List<Integer> sans){
        if(sans.size() == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            res.add(temp);
            fans.add(temp);
            return;
        }

        List<Integer> temp1 = new ArrayList<>(sans);
        fans.add(temp1);

        for(int i = 0; i < nums.length; i++){
            if(nums[i] > -(int)1e9){

                int val = nums[i];
                nums[i] = -(int)1e9;

                sans.add(val);
                if(fans.contains(sans)){
                    nums[i] = val;
                    sans.remove(sans.size() - 1);
                    continue;
                }
                permute_helper(nums, fans, res, sans);

                nums[i] = val;
                sans.remove(sans.size() - 1);
            }
        }
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        HashSet<List<Integer>> hs = new HashSet<List<Integer>>();
        permute_helper(nums, hs, result, new ArrayList<>());
        return result;
    }
}


// 90 

class Solution {

    public void subsetsWithDup_helper(int[] nums, HashSet<List<Integer>> fans, int index, List<Integer> sans){
        if(sans.size() == nums.length){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }

        List<Integer> temp1 = new ArrayList<>(sans);
        fans.add(temp1);

        for(int i = index; i < nums.length; i++){
            if(nums[i] > -(int)1e9){

                int val = nums[i];
                nums[i] = -(int)1e9;

                sans.add(val);
                if(fans.contains(sans)){
                    nums[i] = val;
                    sans.remove(sans.size() - 1);
                    continue;
                }
                subsetsWithDup_helper(nums, fans, i+1, sans);

                nums[i] = val;
                sans.remove(sans.size() - 1);
            }
        }
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        HashSet<List<Integer>> hs = new HashSet<List<Integer>>();
        Arrays.sort(nums);
        subsetsWithDup_helper(nums, hs, 0, new ArrayList<>());

        for(List<Integer> l : hs){
            result.add(l);
        }
        return result;
    }
}




// 77

class Solution {

    public void combine_helper(int idx, int k, List<Integer> sans, List<List<Integer>> fans){
        if(k == sans.size()){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }

        for(int i = idx; i > 0; i--){
            sans.add(i);
            combine_helper(i-1, k, sans, fans);
            sans.remove(sans.size() - 1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combine_helper(n, k, new ArrayList<>(), result);
        return result;
    }
}


// 40

class Solution {

     public void combinationSum2_helper(int[] arr, int idx, int target, List<Integer> sans, List<List<Integer>> fans, HashSet<List<Integer>> hs){
        if(target < 0){
            return;
        }

        if(hs.contains(sans)){
               return;
        }

        List<Integer> temp1 = new ArrayList<>(sans);
        hs.add(temp1);


        if(target == 0){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }
        
        for(int i = idx; i < arr.length; i++){
            sans.add(arr[i]);
            target -= arr[i];
            combinationSum2_helper(arr, i+1, target, sans, fans, hs);
            target += arr[i];
            sans.remove(sans.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum2_helper(candidates, 0, target, new ArrayList<>(), result, new HashSet<List<Integer>>());
        return result;
    }
}


// 216

class Solution {

    public void combinationSum3_helper(int idx, int k, int target, List<Integer> sans, List<List<Integer>> fans){
        if(k == sans.size() && target == 0){
            List<Integer> temp = new ArrayList<>(sans);
            fans.add(temp);
            return;
        }

        for(int i = idx; i > 0; i--){
            sans.add(i);
            target -= i;
            combinationSum3_helper(i-1, k, target, sans, fans);
            target += i;
            sans.remove(sans.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        combinationSum3_helper(9, k, n, new ArrayList<>(), result);
        return result;
    }
}